[buildout]
extends = buildout.cfg

# index = http://colladaverda.upc.edu
# allow-hosts = colladaverda.upc.edu
index = http://f.pypi.python.org/simple
allow-hosts = f.pypi.python.org
timeout = 20

jenkins-test-eggs = max[test]
jenkins-test-directories =
    src/max/max

parts =
#   Framework
    pyramid
#    libevent
#    gevent
#    omelette
    test
    zopepy
    jenkins-test
    jenkins-test-coverage
    coverage
    pylint

#   Nginx
#    headers-module
#    nginx-config
#    nginx

#   Databases & messaging
    mongodb
#    node
#    redis
#    redis_move
#   rabbitmq

    supervisor

#   Config files
    max-ini
    bigmax-ini
#    maxtalk-ini
#    redis-conf
#    node-conf
    maxsettings
#    enable-ssl

[jenkins-test]
recipe = collective.xmltestreport
eggs = ${buildout:jenkins-test-eggs}
script = jenkins-test
# XXX: For now we run robot tests together with all other tests
#defaults = ['--auto-color', '--auto-progress', '--xml', '-t', '!robot_']
defaults = ['--auto-color', '--auto-progress', '--xml', '-t', '!api']

[jenkins-test-coverage]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    # Remove old results
    echo "Erase old coverage results."
    bin/coverage erase
    # Collect test coverage results for all packages
    echo "Run test coverage analysis for all packages."
    DIRECTORIES="${buildout:jenkins-test-directories}"
    for pkgdir in $DIRECTORIES
    do
        # Runs a code coverage analysis on top of the "jenkins-test" script for
        # all packages. The data will be collected in a ".coverage" output file
        # in the buildout directory.
        echo "Analyse $pkgdir"
        bin/coverage run -p --source=$pkgdir bin/jenkins-test --all
    done
    echo "Create test coverage report."
    # Combine all package analysis
    bin/coverage combine
    # Generates a "coverage.xml" file that Jenkins can read and process from the
    # ".coverage" file that the coverage report created.
    bin/coverage xml -i -o ${buildout:directory}/parts/jenkins-test/coverage.xml
    echo "Test coverage report finished."
output = ${buildout:directory}/bin/jenkins-test-coverage
mode = 755

[coverage]
recipe = zc.recipe.egg
eggs = coverage
interpreter = ${buildout:directory}/bin/zopepy

[zopepy]
recipe = zc.recipe.egg
eggs = ${buildout:jenkins-test-eggs}
interpreter = zopepy
scripts = zopepy

[sources]
max = git git://github.com/UPCnet/max.git branch=newpermissionmodel
bigmax = git git://github.com/UPCnet/bigmax.git branch=newpermissionmodel
maxclient = git git://github.com/UPCnet/maxclient.git
max.ui.js = git git://github.com/UPCnet/max.ui.js.git egg=false branch=conversations
maxtalk = git git://github.com/UPCnet/maxtalk.git
maxtalk.node = git git://github.com/UPCnet/maxtalk.node.git egg=false
max.scripts = git git://github.com/UPCnet/max.scripts

[supervisor]
recipe = collective.recipe.supervisor
port = 9101
user = admin
password = admin
serverurl = http://localhost:9101
programs =
    10 mongodb ${buildout:directory}/bin/mongod [--port ${ports:mongodb} --dbpath ${buildout:directory}/var/data --master --logpath ${buildout:directory}/var/log/mongodb.log --directoryperdb --rest] true

[pylint]
recipe = zc.recipe.egg
eggs = logilab.pylintinstaller
       ${buildout:jenkins-test-eggs}
#extra-paths = ${instance:location}/lib/python
entry-points = pylint=pylint.lint:Run
arguments = sys.argv[1:]
arguments = [
   '--output-format=parseable',
   '--zope=y',
   '--reports=y',
   '--disable-msg=E0611,F0401,W0232,E1101,C0103,C0111,R0201,W0201,R0911,R0904,F0220,E1103,R0901,E0211,E0213,E1002,W0622,C0301',
   '--generated-members=objects',
   ] + sys.argv[1:]

# Disable messages:
#
# E0611: No name %r in module %r. Used when a name cannot be found in a module.
# F0401: Unable to import %r (%s). Used when pylint has been unable to import a module.
# W0232: Class has no __init__ method. Used when a class has no __init__ method, neither its parent classes.
# C0103: Invalid name "%s" (should match %s). Used when the name doesn't match the regular expression associated to its type (constant, variable, class...).
# C0111: Message Missing docstring Description Used when a module, function, class or method has no docstring. Some special methods like init don't necessary require a docstring. Explanationâ€¦
# R0201: Method could be a function
# W0201: Attribute %r defined outside __init__
# R0911: Too many return statements (%s/%s)

# E0211: Method has no argument
#        - Reason: raises an error on zope.interface definitions
# E0213 Method should have "self" as first argument
#       - Reason: raises an error on zope.interface definitions
# E1121 Too many positional arguments for function call
#       - Reason: ???
# E1002 Use super on an old style class
#       - Reason: super(CommentsViewlet, self).update() raises an error
# W0622 total_comments: Redefining built-in 'object'
#       - Reason: top level def function will not work (e.g. for catalog indexers)
# ...
# See http://pylint-messages.wikidot.com/all-messages for a full list.
