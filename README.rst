Maxserver buildout
==================

This package contains a buildout system to deploy all the needed
bits to run a max system. Both devel and production environments
can be set with config files included.

System dependencies
-------------------

* Install OS library dependencies (for Ubuntu systems)::

    apt-get install zlib1g-dev build-essential libldap2-dev libsasl2-dev libncurses5-dev xsltproc zip
    libreadline6-dev libncurses5-dev libncursesw5-dev libsqlite3-dev libssl-dev
    tk-dev libgdbm-dev libc6-dev libbz2-dev libxslt1-dev libpcre3-dev libjpeg62-dev libzlcore-dev libfreetype6-dev erlang

* Install OS library dependencies (for OSX systems)::

    brew install pcre

* Check erlang version by executing ``erl -version``. You need erlang at least 5.10.2 R16B01. If you can't get it from your distribution, get the latest erlang and build it from sources following instructions from http://www.erlang.org/doc/installation_guide/INSTALL.html#Required-Utilities_Unpackingn

Deployment options
------------------

There are different .cfg files available to different deploy scenarios, and some need specific setup instructions. Please follow the links on the options to read the specfific docs to use each config file.

First of all, there's some files that are common to all configurations:

- **base.cfg** - This file includes all the common parts that other files use. This is not meant to be used alone, it's a dependency of all others.
- **customizeme.cfg** - Where you customize settings for your instance, (ports, urls, parts ...)
- **mongoauth.cfg** - Where you specify current mongodb settings. This file is autogenerated by the bootstrap process and si it's not included in this repository.


The following files are used for development and debugging:

- `devel.cfg <docs/devel.rst>`_ - Development version, full stack, with sources from git
- `devel-with-osiris.cfg <docs/devel-with-osiris.rst>`_ - Development version, full stack, with sources from git, using local oauth
- `debug.cfg <docs/debug.rst>`_ - To connect to a (monolytic) remote max environment locally.

These other files are used to deploy a single component of the stack, all
meant to be used in a production environment:

- `max-only.cfg <docs/max.rst>`_ - Deploys a max instance
- `bigmax-only.cfg <docs/bigmax.rst>`_ - Deploys a bigmax instance
- `mongodb-only.cfg <docs/mongodb.rst>`_ - Deploys a mongodb cluster
- `nginx-only.cfg <docs/nginx.rst>`_ - Deploy a nginx server for max
- `osiris-only.cfg <docs/osiris.rst>`_ - Deploy a osiris oauth server for max
- `talk-only.cfg <docs/talk.rst>`_ - Deploy RabbitMQ and queue processing tools


And finally there's a jenkins.cfg configuration, that is similar to devel.cfg, only to be used inside jenkins CI.

* Bootstrap and execute buildout::

    $ python bootstrap.py -c <configfile.cfg>
    $ ./bin/buildout -c <configfile.cfg>
